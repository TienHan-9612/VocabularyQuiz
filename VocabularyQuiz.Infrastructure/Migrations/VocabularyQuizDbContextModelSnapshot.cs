// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VocabularyQuiz.Infrastructure;

#nullable disable

namespace VocabularyQuiz.Infrastructure.Migrations
{
    [DbContext(typeof(VocabularyQuizDbContext))]
    partial class VocabularyQuizDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int>("QuizzSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("quizz_participation_pkey");

                    b.HasIndex("QuizzSessionId");

                    b.ToTable("QuizzParticipation", (string)null);
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("quizz_session_pkey");

                    b.ToTable("QuizzSession", (string)null);
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSessionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int>("QuizzSessionId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("quizz_session_question_pkey");

                    b.HasIndex("QuizzSessionId");

                    b.ToTable("QuizzSessionQuestion", (string)null);
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSessionQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuizzQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("quizz_session_question_answer_pkey");

                    b.HasIndex("QuizzQuestionId");

                    b.ToTable("QuizzSessionQuestionAnswer", (string)null);
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzParticipation", b =>
                {
                    b.HasOne("VocabularyQuiz.Infrastructure.Entities.QuizzSession", "QuizzSession")
                        .WithMany("QuizzParticipations")
                        .HasForeignKey("QuizzSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quizz_session_participation_fk");

                    b.Navigation("QuizzSession");
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSessionQuestion", b =>
                {
                    b.HasOne("VocabularyQuiz.Infrastructure.Entities.QuizzSession", "QuizzSession")
                        .WithMany("QuizzSessionQuestions")
                        .HasForeignKey("QuizzSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quizz_session_question_fk");

                    b.Navigation("QuizzSession");
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSessionQuestionAnswer", b =>
                {
                    b.HasOne("VocabularyQuiz.Infrastructure.Entities.QuizzSessionQuestion", "QuizzSessionQuestion")
                        .WithMany("QuizzSessionQuestionAnswers")
                        .HasForeignKey("QuizzQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quizz_session_question_answer_fk");

                    b.Navigation("QuizzSessionQuestion");
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSession", b =>
                {
                    b.Navigation("QuizzParticipations");

                    b.Navigation("QuizzSessionQuestions");
                });

            modelBuilder.Entity("VocabularyQuiz.Infrastructure.Entities.QuizzSessionQuestion", b =>
                {
                    b.Navigation("QuizzSessionQuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
